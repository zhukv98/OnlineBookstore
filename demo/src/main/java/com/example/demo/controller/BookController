package com.example.demo.controller;
import com.enterprise.sandboxupgrade.entity.*;
import com.enterprise.sandboxupgrade.service.*;
import jakarta.json.JsonObject;
import jakarta.json.JsonString;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;
@Controller
public class BookController {
    @Autowired
    private BookService bookService;

    @GetMapping("/books")
    public String getBooks(Model model) {
        try {
            List<Book> books = bookService.fetchAll();
            model.addAttribute("books", books);
        } catch (Exception e) {
            model.addAttribute("error", "Unable to fetch books: " + e.getMessage());
        }
        return "books";
    }
    @GetMapping("/book/{id}")
    public String getBook(@PathVariable int id, Model model) {
        try {
            Book book = bookService.fetch(id);
            if (book != null) {
                model.addAttribute("book", book);
            } else {
                model.addAttribute("error", "Book not found");
            }
        } catch (Exception e) {
            model.addAttribute("error", "Unable to fetch book: " + e.getMessage());
        }
        return "book";
    }
    @PostMapping("/book")
    public ResponseEntity<String> createBook(@Valid @RequestBody Book book, Errors errors) {
        if (errors.hasErrors()) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid book data");
        }
        try {
            Book createdBook = bookService.createBook(book.getId());
            return ResponseEntity.status(HttpStatus.CREATED).body("Book created with ID: " + createdBook.getId());
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error creating book: " + e.getMessage());
        }
    }
    @PutMapping("/book/{id}")
    public ResponseEntity<String> updateBook(@PathVariable int id, @Valid @RequestBody Book book, Errors errors) {
        if (errors.hasErrors()) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid book data");
        }
        try {
            Book updatedBook = bookService.updateBook(id, book);
            return ResponseEntity.status(HttpStatus.OK).body("Book updated with ID: " + updatedBook.getId());
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error updating book: " + e.getMessage());
        }
    }
    @DeleteMapping("/book/{id}")
    public ResponseEntity<String> deleteBook(@PathVariable int id) {
        try {
            Book deletedBook = bookService.deleteBook(id);
            return ResponseEntity.status(HttpStatus.OK).body("Book deleted with ID: " + deletedBook.getId());
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error deleting book: " + e.getMessage());
        }
    }
    @PostMapping("/book/upload")
    public ResponseEntity<String> uploadBookCover(@RequestParam("file") MultipartFile file) {
        if (file.isEmpty()) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("No file uploaded");
        }
        try {
            String filename = file.getOriginalFilename();
            Path path = Paths.get("uploads/" + filename);
            Files.createDirectories(path.getParent());
            Files.write(path, file.getBytes());
            return ResponseEntity.status(HttpStatus.CREATED).body("File uploaded successfully: " + filename);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error uploading file: " + e.getMessage());
        }
    }
    @GetMapping("/book/search")
    public ResponseEntity<List<Book>> searchBooks(@RequestParam String title) {
        try {
            List<Book> books = bookService.fetchAll().stream()
                    .filter(book -> book.getTitle().toLowerCase().contains(title.toLowerCase()))
                    .collect(Collectors.toList());
            return ResponseEntity.ok(books);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new ArrayList<>());
        }
    }
    @GetMapping("/book/{id}/authors")
    public String getBookAuthors(@PathVariable int id, Model model) {
        try {
            Book book = bookService.fetch(id);
            if (book != null) {
                List<Author> authors = book.getAuthors();
                model.addAttribute("book", book);
                model.addAttribute("authors", authors);
            } else {
                model.addAttribute("error", "Book not found");
            }
        } catch (Exception e) {
            model.addAttribute("error", "Unable to fetch book's authors: " + e.getMessage());
        }
        return "bookAuthors";
    }
    @GetMapping("/book/{id}/cover")
    public ResponseEntity<byte[]> getBookCover(@PathVariable int id) {
        try {
            Book book = bookService.fetch(id);
            if (book != null && book.getCoverImage() != null) {
                Path path = Paths.get("uploads/" + book.getCoverImage());
                byte[] imageBytes = Files.readAllBytes(path);
                HttpHeaders headers = new HttpHeaders();
                headers.setContentType(MediaType.IMAGE_JPEG);
                return new ResponseEntity<>(imageBytes, headers, HttpStatus.OK);
            } else {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
            }
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }
    @GetMapping("/book/{id}/authors/search")
    public ResponseEntity<List<Author>> searchAuthorsByBook(@PathVariable int id, @RequestParam String name) {
        try {
            Book book = bookService.fetch(id);
            if (book != null) {
                List<Author> authors = book.getAuthors().stream()
                        .filter(author -> author.getName().toLowerCase().contains(name.toLowerCase()))
                        .collect(Collectors.toList());
                return ResponseEntity.ok(authors);
            } else {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new ArrayList<>());
            }
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new ArrayList<>());
        }
    }
    @GetMapping("/book/{id}/authors/{authorId}")
    public String getAuthorDetails(@PathVariable int id, @PathVariable int authorId, Model model) {
        try {
            Book book = bookService.fetch(id);
            if (book != null) {
                Author author = book.getAuthors().stream()
                        .filter(a -> a.getId() == authorId)
                        .findFirst()
                        .orElse(null);
                if (author != null) {
                    model.addAttribute("book", book);
                    model.addAttribute("author", author);
                } else {
                    model.addAttribute("error", "Author not found");
                }
            } else {
                model.addAttribute("error", "Book not found");
            }
        } catch (Exception e) {
            model.addAttribute("error", "Unable to fetch author details: " + e.getMessage());
        }
        return "authorDetails";
    }
    @PostMapping("/book/{id}/authors")
    public ResponseEntity<String> addAuthorToBook(@PathVariable int id, @Valid @RequestBody Author author, Errors errors) {
        if (errors.hasErrors()) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid author data");
        }
        try {
            Book book = bookService.fetch(id);
            if (book != null) {
                book.getAuthors().add(author);
                bookService.updateBook(id);
                return ResponseEntity.status(HttpStatus.OK).body("Author added to book with ID: " + id);
            } else {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Book not found");
            }
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error adding author to book: " + e.getMessage());
        }
    }
    @GetMapping("/book/{id}/authors/{authorId}/books")
    public String getAuthorBooks(@PathVariable int id, @PathVariable int authorId, Model model) {
        try {
            Book book = bookService.fetch(id);
            if (book != null) {
                Author author = book.getAuthors().stream()
                        .filter(a -> a.getId() == authorId)
                        .findFirst()
                        .orElse(null);
                if (author != null) {
                    List<Book> booksByAuthor = author.getBooks();
                    model.addAttribute("book", book);
                    model.addAttribute("author", author);
                    model.addAttribute("booksByAuthor", booksByAuthor);
                } else {
                    model.addAttribute("error", "Author not found");
                }
            } else {
                model.addAttribute("error", "Book not found");
            }
        } catch (Exception e) {
            model.addAttribute("error", "Unable to fetch author's books: " + e.getMessage());
        }
        return "authorBooks";
    }
    @GetMapping("/book/{id}/authors/{authorId}/books/search")
    public ResponseEntity<List<Book>> searchBooksByAuthor(@PathVariable int id, @PathVariable int authorId, @RequestParam String title) {
        try {
            Book book = bookService.fetch(id);
            if (book != null) {
                Author author = book.getAuthors().stream()
                        .filter(a -> a.getId() == authorId)
                        .findFirst()
                        .orElse(null);
                if (author != null) {
                    List<Book> books = author.getBooks().stream()
                            .filter(b -> b.getTitle().toLowerCase().contains(title.toLowerCase()))
                            .collect(Collectors.toList());
                    return ResponseEntity.ok(books);
                } else {
                    return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new ArrayList<>());
                }
            } else {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new ArrayList<>());
            }
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new ArrayList<>());
        }
    }
}
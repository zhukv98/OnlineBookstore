package com.enterprise.sandboxupgrade.controller;
import com.enterprise.sandboxupgrade.entity.*;
import com.enterprise.sandboxupgrade.service.*;
import jakarta.json.JsonObject;
import jakarta.json.JsonString;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

//Based on content from UC's Enterprise Development course
@Controller
public class OnlineBookstoreController {

    @Autowired
    IAuthourizationService authorizationService;

    @Autowired
    IAuthourService authourService;

    @Autowired
    IBookService bookService;


    /**
     * Display student VM.
     * @return capstone/vm page.
     * @throws Exception
     */
//    @GetMapping(value={"","/","/index","/index.html","/home","/home.html"})
    @GetMapping(value={"/index","/index.html"})
    public String viewMainPage(Model model) throws Exception {
        getStarted();
//        model.addAttribute("listCourse", orchestratorService.getUserCourses("jonesm@mail.uc.edu"));
        model.addAttribute("listBooks", bookService.fetchAll());
        model.addAttribute("listAuthors", authourService.fetchAll());
        model.addAttribute("user", orchestratorService.getUser());


        model.addAttribute("usertype", orchestratorService.getUserType());
        return "index";
    }

    //todo What is this for?
    @GetMapping("/courses")
    public String viewCoursesPage(Model model) throws Exception {
        getStarted();
//        model.addAttribute("listCourse", orchestratorService.getUserCourses("jonesm@mail.uc.edu"));
        model.addAttribute("listCourse", orchestratorService.getUserCourses());
//        model.addAttribute("listSemester", semesterService.fetchAll());
        model.addAttribute("listVMs", vmService.fetchAll());
        model.addAttribute("listVMconfigureOptions", VmConfigurationService.fetchAll());
        model.addAttribute("listLabs", labService.fetchAll());
        return "index";
    }

    private void getStarted() throws Exception{
//        if(!isStarted) orchestratorService.getStarted();
        orchestratorService.getStarted();
        isStarted = true;
    }

    @GetMapping("/create-lab")
    public String createLab(Model model) throws Exception {
        getStarted();
        Lab lab = new Lab();
        model.addAttribute("lab", lab);
        model.addAttribute("course", new PublicCourse());
        model.addAttribute("listCourse", orchestratorService.getUserCourses());
//        model.addAttribute("usertype", orchestratorService.getUserType());
        model.addAttribute("user", orchestratorService.getUser());

        return "create-lab";
    }

    @PostMapping("/saveLab")
//    public String saveLab(@ModelAttribute("lab") Lab lab, @RequestParam("imageFile") MultipartFile imageFile,
//                          @RequestParam("videoFile") MultipartFile videoFile)
    public String saveLab(@RequestParam("imageFile") MultipartFile imageFile,
                          @RequestParam("videoFile") MultipartFile videoFile,
                          @ModelAttribute("course") PublicCourse course,
                          @ModelAttribute("lab") Lab lab)
            throws Exception {
        getStarted();
        //From UC's Enterprise Development course by Prof. Jones
        //Storing file on server, (and String path in database)
        Path currentPath = Paths.get(".");
        Path absolutePath = currentPath.toAbsolutePath();
        byte[] bytes;
        Path path;
        bytes = imageFile.getBytes();
        if(bytes.length > 0){
            path = Paths.get(absolutePath + "/src/main/resources/static/photos/" + imageFile.getOriginalFilename());
            Files.write(path, bytes);
            path = Paths.get("photos/"+imageFile.getOriginalFilename());
            lab.setImage(path.toString());
            lab.setDueDate(new Date());
//        lab.setCourse(new Course());
        }


        // same for video
        bytes = videoFile.getBytes();
        if(bytes.length > 0){
            path = Paths.get(absolutePath + "/src/main/resources/static/videos/" + videoFile.getOriginalFilename());
            Files.write(path, bytes);
            path = Paths.get("videos/"+imageFile.getOriginalFilename());
            lab.setLink(path.toString());
        }


        // todo 1. correct courseID so submitted by user
        // todo 2. correct Due-date so submitted by user
//        if(course.id <= 0){
//            orchestratorService.assignLabCourse(lab, 4);
//        } else {
            orchestratorService.assignLabCourse(lab, course.id);
//        }
        labService.save(lab);
        return "redirect:/";
    }

    @GetMapping("/login")
    public String login(Model model) throws Exception {
        getStarted();
        // TODO check if user is not logged in
        return "login";
    }

    @PostMapping("/login")
    public String postLogin(Model model) throws Exception {
        getStarted();
        return "index";
    }

    @GetMapping("/powerOffVM")
    public String powerOffVM(Model model) throws Exception {
        getStarted();
        vmWareService.powerOffVM("vm-38");
        return "redirect:/";
    }

    @GetMapping("/powerStartVM")
    public String powerStartVM(Model model) throws Exception {
        getStarted();
        vmWareService.powerOnVM("vm-38");
        return "redirect:/";
    }

//    @GetMapping("/getConsoleTicket")
//    public String getConsoleTicket(Model model) throws Exception {
//        getStarted();
//        String ticket = vmWareService.generateTicket("vm-38");
//        return "redirect:/";
//    }

    @GetMapping(value={"","/","/new-design"})
    public String newDesign(Model model) throws Exception {
        getStarted();

        if(orchestratorService.getUserType().equals("student")){
            return "redirect:/student";
        }
        return "redirect:/instructor";
    }

    @GetMapping("/instructor")
    public String instructor(Model model) throws Exception {
        getStarted();
        List<PublicCourse> courses = orchestratorService.getUserCourses();
        String firstVm = courses.get(0).publicVms.get(0).VMWareName;
        model.addAttribute("listCourse", courses);
        model.addAttribute("user", orchestratorService.getUser());
//        model.addAttribute("ticket", vmWareService.generateTicket(firstVm));
        return "instructor-main";
    }

    @GetMapping("/student")
    public String student(Model model) throws Exception {
        getStarted();
        List<PublicCourse> courses = orchestratorService.getUserCourses();
        String firstVm = courses.get(0).publicVms.get(0).VMWareName;
        model.addAttribute("listCourse", courses);
        model.addAttribute("user", orchestratorService.getUser());
//        model.addAttribute("ticket", vmWareService.generateTicket(firstVm));
        return "student";
    }


    @PostMapping("/console-ticket/{userType}/{userEmail}/{courseId}/{vmId}")
    public ResponseEntity getSelectedVmTicket(@PathVariable("userType") String userType,
                                              @PathVariable("userEmail") String userEmail,
                                              @PathVariable("courseId") int courseId,
                                              @PathVariable("vmId") int vmId) throws Exception {
        getStarted();
        String realVmName = orchestratorService.getVmRealName(vmId);
        String firstVm  = "";
        String ticket = "";
        String powerState = "off";

        if(vmWareService.isVmPowerOn(realVmName)){
            powerState = "on";
            PublicCourse course = orchestratorService.getUserCourses().stream().filter(c -> c.id == courseId).
                    collect(Collectors.toList()).get(0);
            if(userType.equals("instructor") || userType.equals("student")) {
                firstVm = course.publicVms.stream().filter(vm -> vm.vmID == vmId).
                        collect(Collectors.toList()).get(0).VMWareName;
            }else if(userType.equals("students")) { // this for instructor to access their students vms (for the course)
                List<PublicVM> stuVms = new ArrayList<PublicVM>();

                for (PublicUser student : course.publicStudentVmsMap.keySet()){
                    if(student.username.equals(userEmail)){
                        stuVms = course.publicStudentVmsMap.get(student);
                        break;
                    }
                }
                if(stuVms.size() > 0){
                    firstVm = stuVms.stream().filter(vm -> vm.vmID == vmId).
                            collect(Collectors.toList()).get(0).VMWareName;
                }
            }
            ticket = vmWareService.generateTicket(firstVm).substring(6);
        }


        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        String selectedVmTicket = "{\"ticket\":\""+ ticket+ "\",\"powerState\":\""+ powerState+"\"}";
        return new ResponseEntity(selectedVmTicket, headers, HttpStatus.OK);
    }



    @PostMapping("/powerOffTheVM/{vmId}")
    public ResponseEntity powerOffTheVM(@PathVariable("vmId") Integer vmId) throws Exception {
        String vmRealName = orchestratorService.getVmRealName(vmId);
        String message = "{\"message\":\"Powered off - Not successful\"}";
        if(vmWareService.isVmPowerOn(vmRealName)){
            vmWareService.powerOffVM(vmRealName);
            message = "{\"message\":\"Successfully powered off\"}";
        }
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        return new ResponseEntity(message, headers, HttpStatus.OK);
    }


    @PostMapping("/powerOnTheVM/{vmId}")
    public ResponseEntity powerOnTheVM(@PathVariable("vmId") Integer vmId) throws Exception {
        String vmRealName = orchestratorService.getVmRealName(vmId);
        String message = "{\"message\":\"Powered on - Not successful\"}";

        if(vmWareService.isVmPowerOff(vmRealName)){
            vmWareService.powerOnVM(vmRealName);
            message = "{\"message\":\"Successfully powered on\"}";

        }
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        return new ResponseEntity(message, headers, HttpStatus.OK);
    }
}
package com.example.demo.controller;
import com.enterprise.sandboxupgrade.entity.*;
import com.enterprise.sandboxupgrade.service.*;
import jakarta.json.JsonObject;
import jakarta.json.JsonString;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;
@Controller
public class AuthorController {
    @Autowired
    private AuthorService authorService;

    @GetMapping("/authors")
    public String getAuthors(Model model) {
        try {
            List<Author> authors = authorService.fetchAll();
            model.addAttribute("authors", authors);
        } catch (Exception e) {
            model.addAttribute("error", "Unable to fetch authors: " + e.getMessage());
        }
        return "authors";
    }
    @GetMapping("/author/{id}")
    public String getAuthor(@PathVariable int id, Model model) {
        try {
            Author author = authorService.fetch(id);
            if (author != null) {
                model.addAttribute("author", author);
            } else {
                model.addAttribute("error", "Author not found");
            }
        } catch (Exception e) {
            model.addAttribute("error", "Unable to fetch author: " + e.getMessage());
        }
        return "author";
    }
    @PostMapping("/author")
    public ResponseEntity<String> createAuthor(@Valid @RequestBody Author author, Errors errors) {
        if (errors.hasErrors()) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid author data");
        }
        try {
            Author createdAuthor = authorService.createAuthor(author.getId());
            return ResponseEntity.status(HttpStatus.CREATED).body("Author created with ID: " + createdAuthor.getId());
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error creating author: " + e.getMessage());
        }
    }
    @PutMapping("/author/{id}")
    public ResponseEntity<String> updateAuthor(@PathVariable int id, @Valid @RequestBody Author author, Errors errors) {
        if (errors.hasErrors()) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid author data");
        }
        try {
            Author updatedAuthor = authorService.updateAuthor(id, author);
            return ResponseEntity.ok("Author updated with ID: " + updatedAuthor.getId());
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error updating author: " + e.getMessage());
        }
    }
    @DeleteMapping("/author/{id}")
    public ResponseEntity<String> deleteAuthor(@PathVariable int id) {
        try {
            Author deletedAuthor = authorService.deleteAuthor(id);
            return ResponseEntity.ok("Author deleted with ID: " + deletedAuthor.getId());
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error deleting author: " + e.getMessage());
        }
    }
    @GetMapping("/author/search")
    public ResponseEntity<List<Author>> searchAuthors(@RequestParam String name) {
        try {
            List<Author> authors = authorService.fetchAll().stream()
                    .filter(author -> author.getName().toLowerCase().contains(name.toLowerCase()))
                    .collect(Collectors.toList());
            return ResponseEntity.ok(authors);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new ArrayList<>());
        }
    }
    @GetMapping("/author/{id}/books")
    public String getAuthorBooks(@PathVariable int id, Model model) {
        try {
            Author author = authorService.fetch(id);
            if (author != null) {
                List<Book> books = author.getBooks();
                model.addAttribute("author", author);
                model.addAttribute("books", books);
            } else {
                model.addAttribute("error", "Author not found");
            }
        } catch (Exception e) {
            model.addAttribute("error", "Unable to fetch author's books: " + e.getMessage());
        }
        return "authorBooks";
    }
    @PostMapping("/author/{id}/upload")
    public ResponseEntity<String> uploadAuthorImage(@PathVariable int id, @RequestParam("file") MultipartFile file) {
        if (file.isEmpty()) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("File is empty");
        }
        try {
            String fileName = file.getOriginalFilename();
            Path path = Paths.get("uploads/" + id + "/" + fileName);
            Files.createDirectories(path.getParent());
            Files.write(path, file.getBytes());
            return ResponseEntity.ok("File uploaded successfully: " + fileName);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error uploading file: " + e.getMessage());
        }
    }
    @GetMapping("/author/{id}/image")
    public ResponseEntity<byte[]> getAuthorImage(@PathVariable int id) {
        try {
            Path path = Paths.get("uploads/" + id + "/profile.jpg");
            if (Files.exists(path)) {
                byte[] imageBytes = Files.readAllBytes(path);
                HttpHeaders headers = new HttpHeaders();
                headers.setContentType(MediaType.IMAGE_JPEG);
                return new ResponseEntity<>(imageBytes, headers, HttpStatus.OK);
            } else {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
            }
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }
    @GetMapping("/author/{id}/books/search")
    public ResponseEntity<List<Book>> searchBooksByAuthor(@PathVariable int id, @RequestParam String title) {
        try {
            Author author = authorService.fetch(id);
            if (author != null) {
                List<Book> books = author.getBooks().stream()
                        .filter(book -> book.getTitle().toLowerCase().contains(title.toLowerCase()))
                        .collect(Collectors.toList());
                return ResponseEntity.ok(books);
            } else {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new ArrayList<>());
            }
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new ArrayList<>());
        }
    }
    @GetMapping("/author/{id}/books/{bookId}")
    public String getBookDetails(@PathVariable int id, @PathVariable int bookId, Model model) {
        try {
            Author author = authorService.fetch(id);
            if (author != null) {
                Book book = author.getBooks().stream()
                        .filter(b -> b.getId() == bookId)
                        .findFirst()
                        .orElse(null);
                if (book != null) {
                    model.addAttribute("author", author);
                    model.addAttribute("book", book);
                } else {
                    model.addAttribute("error", "Book not found");
                }
            } else {
                model.addAttribute("error", "Author not found");
            }
        } catch (Exception e) {
            model.addAttribute("error", "Unable to fetch book details: " + e.getMessage());
        }
        return "bookDetails";
    }
    @PostMapping("/author/{id}/books")
    public ResponseEntity<String> addBookToAuthor(@PathVariable int id, @Valid @RequestBody Book book, Errors errors) {
        if (errors.hasErrors()) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid book data");
        }
        try {
            Author author = authorService.fetch(id);
            if (author != null) {
                author.getBooks().add(book);
                authorService.updateAuthor(id);
                return ResponseEntity.status(HttpStatus.CREATED).body("Book added to author with ID: " + id);
            } else {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Author not found");
            }
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error adding book: " + e.getMessage());
        }
    }
    @PutMapping("/author/{id}/books/{bookId}")
    public ResponseEntity<String> updateBookInAuthor(@PathVariable int id, @PathVariable int bookId, @Valid @RequestBody Book book, Errors errors) {
        if (errors.hasErrors()) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid book data");
        }
        try {
            Author author = authorService.fetch(id);
            if (author != null) {
                Book existingBook = author.getBooks().stream()
                        .filter(b -> b.getId() == bookId)
                        .findFirst()
                        .orElse(null);
                if (existingBook != null) {
                    existingBook.setTitle(book.getTitle());
                    existingBook.setPublishedDate(book.getPublishedDate());
                    authorService.updateAuthor(id);
                    return ResponseEntity.ok("Book updated with ID: " + bookId);
                } else {
                    return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Book not found");
                }
            } else {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Author not found");
            }
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error updating book: " + e.getMessage());
        }
    }
    @DeleteMapping("/author/{id}/books/{bookId}")
    public ResponseEntity<String> deleteBookFromAuthor(@PathVariable int id, @PathVariable int bookId) {
        try {
            Author author = authorService.fetch(id);
            if (author != null) {
                Book existingBook = author.getBooks().stream()
                        .filter(b -> b.getId() == bookId)
                        .findFirst()
                        .orElse(null);
                if (existingBook != null) {
                    author.getBooks().remove(existingBook);
                    authorService.updateAuthor(id);
                    return ResponseEntity.ok("Book deleted with ID: " + bookId);
                } else {
                    return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Book not found");
                }
            } else {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Author not found");
            }
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error deleting book: " + e.getMessage());
        }
    }
}